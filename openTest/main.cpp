#define GLUT_DISABLE_ATEXIT_HACK

#include <iostream>
#include <vgl.h>
#include <LoadShaders.h>
#include <GL/GL.h>

using namespace std;

enum VAO_IDs
{
	Triangles,
	NumVAOs
};
enum Buffer_IDs
{
	ArrayBuffer, 
	NumBuffers
};
enum Attrib_IDs
{
	vPosition = 0
};


GLuint VAOs[NumVAOs];
GLuint Buffers[NumBuffers];
const GLuint Numvertices = 6;

void init(void) {
	glGenVertexArrays(NumVAOs, VAOs);
	glBindVertexArray(VAOs[Triangles]);

	GLfloat vertices[Numvertices][2] = {
		{ -0.9, -0.9},
		{ 0.85, -0.9},
		{ -0.9, 0.85},

		{ 0.9, -0.85},
		{ 0.9, -0.9},
		{ -0.85, 0.9},
	};

	glGenBuffers(NumBuffers, Buffers);
	glBindBuffer(GL_ARRAY_BUFFER, Buffers[ArrayBuffer]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

	ShaderInfo shaders[] = {
		{GL_VERTEX_SHADER, "triangle.vert"},
		{GL_FRAGMENT_SHADER, "triangle.frag"},
		{GL_NONE, NULL}
	};

	GLuint program = LoadShaders(shaders);
	glUseProgram(program);

	glVertexAttribPointer(vPosition, 2, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(0));
	glEnableVertexAttribArray(vPosition);

}

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	glBindVertexArray(VAOs[Triangles]);
	glDrawArrays(GL_TRIANGLES, 0, Numvertices);

	glFlush();
}
int main(int argc, char* argv[]) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE);
	glutInitWindowSize(512, 512);
	glutInitContextVersion(4, 3);
	glutCreateWindow("OpenGL");

	if (glewInit())
	{
		cerr << "DFDFDF" << endl;
		exit(EXIT_FAILURE);
	}
	init();
	
	glutDisplayFunc(display);

	glutMainLoop();
}